services:
  postgres:
    image: postgres:17
    container_name: photo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "userdb" ]
      interval: 5s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - photo-network

  email-service:
    build:
      context: ./backend/email-service
    container_name: email-service
    ports:
      - "8000:8000"
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
    networks:
      - photo-network

  list-service:
    build:
      context: ./backend/list-service
    container_name: list-service
    ports:
      - "8001:8001"
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      ENVIRONMENT: ${ENVIRONMENT}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - photo-network

  metric-service:
    build:
      context: ./backend/metric-service
    container_name: metric-service
    ports:
      - "8002:8002"
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      ENVIRONMENT: ${ENVIRONMENT}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - photo-network

  web:
    build:
      context: ./frontend
    container_name: photo-web
    ports:
      - "8080:80"
    depends_on:
      - list-service
      - email-service
      - metric-service
    networks:
      - photo-network

volumes:
  postgres_data:

networks:
  photo-network:
    driver: bridge